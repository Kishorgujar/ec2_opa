name: "Security_Catalog Deployment"
on:
  workflow_dispatch:
    inputs:
      destroy:
        description: 'Whether to destroy the infra components'
        default: false
        required: false
        type: boolean
      region:
        description: 'Which region would want to deploy to'
        default: 'ap-south-1'
        required: false
        type: string
  push:
    branches:
      - main
      - scp

defaults:
  run:
    shell: bash
    working-directory: ./

jobs:
  terraform-create:
    if: ${{ github.event.inputs.destroy == 'false' }}
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}
      AWS_DEFAULT_REGION: ${{ github.event.inputs.region }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up AWS Creds
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}
      - name: Install dependencies
        uses: hashicorp/setup-terraform@v2
      - name: Terraform Init
        run: |
          terraform init -upgrade
      - name: Terraform Plan
        run: |
          terraform plan -out=./tfplan
          terraform show -json ./tfplan > terraform-plan-output.json  # Generate JSON output for OPA

      # Debug the Terraform plan output
      - name: Debug Terraform Plan Output
        run: |
          echo "Terraform Plan Output:"
          cat terraform-plan-output.json > terraform-plan-debug.json  # Save output for inspection
          # Validate JSON format
          jq . terraform-plan-output.json

      # Extract INSTANCE_TYPE safely
      - name: Extract Instance Type
        run: |
          INSTANCE_TYPE=$(jq -r '.planned_values.root_module.resources[] | select(.type=="aws_instance") | .values.instance_type // empty' terraform-plan-output.json)
          echo "{\"resource_type\": \"aws_instance\", \"instance_type\": \"$INSTANCE_TYPE\"}" > input.json

      # Add OPA Policy Check Step
      - name: Install OPA
        run: |
          curl -L -o opa https://openpolicyagent.org/downloads/latest/opa_linux_amd64
          chmod +x opa
          sudo mv opa /usr/local/bin/
      - name: Run OPA Policy Check
        run: |
          echo "Running OPA Policy Check"
          opa eval --data ec2policy.rego --input terraform-plan-output.json "data.ec2policy.deny" --format=json | jq

      # Conditionally apply Terraform only if OPA check passes
      - name: Terraform Apply
        if: ${{ success() }}
        run: |
          terraform apply -auto-approve ./tfplan

  terraform-destroy:
    if: ${{ github.event.inputs.destroy == 'true' }}
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}
      AWS_DEFAULT_REGION: ${{ github.event.inputs.region }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up AWS Creds
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}
      - name: Install dependencies
        uses: hashicorp/setup-terraform@v2
      - name: Terraform Init
        run: |
          terraform init -upgrade
      - name: Terraform Plan
        run: |
          terraform plan -destroy -out=./tfplan
          terraform show -json ./tfplan > terraform-plan-output.json  # Generate JSON output for OPA
      - name: Terraform Apply
        run: |
          terraform apply -auto-approve ./tfplan
